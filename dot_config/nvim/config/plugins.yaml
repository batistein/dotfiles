---
# PLUGINS
# ===
# See config/plugins/all.vim for plugin mappings and config/plugins/*.vim

# Startup
# -------
- repo: Shougo/dein.vim
- repo: itchyny/vim-gitbranch
- repo: itchyny/vim-parenmatch
- repo: thinca/vim-localrc
- repo: romainl/vim-cool
- repo: sgur/vim-editorconfig
- repo: Shougo/context_filetype.vim
- repo: jaawerth/nrun.vim
- { repo: rafi/awesome-vim-colorschemes, merged: 0 }

- repo: christoomey/vim-tmux-navigator
  if: "! (has('win32') || has('win64'))"

- repo: tpope/vim-sleuth
  hook_add: let g:sleuth_neighbor_limit = 5

# GUI only:
- { repo: equalsraf/neovim-gui-shim, if: has('gui_running') }

# Vim8 only:
- { repo: roxma/nvim-yarp, if: "! has('nvim')", depends: vim-hug-neovim-rpc }
- { repo: roxma/vim-hug-neovim-rpc, if: "! has('nvim')" }

# Lazy Loading
# ==========================================

# Languages
# ---------
- { repo: hail2u/vim-css3-syntax, on_ft: css }
- { repo: othree/csscomplete.vim, on_ft: css }
- { repo: cakebaker/scss-syntax.vim, on_ft: [ scss, sass ]}
- { repo: groenewege/vim-less, on_ft: less }
- { repo: iloginow/vim-stylus, on_ft: stylus }  # or wavded/vim-stylus ?
- { repo: mustache/vim-mustache-handlebars, on_ft: [html, mustache, handlebars]}
- { repo: digitaltoad/vim-pug, on_ft: [ pug, jade ]}

- repo: othree/html5.vim
  on_ft: html
  hook_add: |-
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_aria_attributes_complete = 0

# Markdown related
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |-
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_folding_level = 6
    let g:vim_markdown_override_foldtext = 1
    let g:vim_markdown_folding_style_pythonic = 1
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_conceal_code_blocks = 0
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_auto_insert_bullets = 1
    let g:vim_markdown_new_list_item_indent = 0
    let g:vim_markdown_toc_autofit = 0
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'jsx=javascriptreact',
      \ 'tsx=typescriptreact',
      \ 'docker=Dockerfile',
      \ 'makefile=make',
      \ 'py=python'
      \ ]

- repo: rhysd/vim-gfm-syntax
  depends: vim-markdown
  on_ft: markdown
  hook_add: |-
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_highlight_emoji = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

# Javascript related
- repo: pangloss/vim-javascript
  on_ft: [ javascript, javascriptreact ]
  hook_add: |-
    let g:javascript_plugin_jsdoc = 1
    let g:javascript_plugin_flow = 1

- repo: HerringtonDarkholme/yats.vim
  on_ft: [ typescript, typescriptreact ]

- repo: MaxMEllon/vim-jsx-pretty
  on_ft: [ javascript, javascriptreact, typescriptreact ]
  depends: vim-javascript
  hook_add: let g:vim_jsx_pretty_colorful_config = 1

- { repo: leafOfTree/vim-svelte-plugin, depends: yats.vim, on_ft: svelte }
- { repo: heavenshell/vim-jsdoc, on_ft: [ javascript, javascriptreact ] }
- { repo: jparise/vim-graphql, on_ft: [ javascript, javascriptreact ] }
- { repo: moll/vim-node, on_ft: [ javascript, javascriptreact ] }
- { repo: kchmck/vim-coffee-script, on_ft: [ coffee, litcoffee ] }
- { repo: elzr/vim-json, on_ft: json }
- { repo: posva/vim-vue, on_ft: vue }

# pangloss/javascript vs. othree/yajs
#- { repo: othree/yajs.vim, on_ft: [ javascript, javascriptreact ]}
#- { repo: gavocanov/vim-js-indent, on_ft: [ javascript, javascriptreact ]}
#- repo: mxw/vim-jsx
#  on_ft: [ javascript, javascriptreact ]
#  hook_add: let g:jsx_ext_required = 0

# Golang related
- repo: fatih/vim-go
  if: has('nvim-0.4.0') || has('patch-8.0.1453')
  on_ft: [ go, gomod ]
  hook_add: |-
    let g:go_gopls_enabled = 0
    let g:go_code_completion_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
    let g:go_def_mapping_enabled = 0
    let g:go_mod_fmt_autosave = 0
    let g:go_highlight_array_whitespace_error = 0
    let g:go_highlight_chan_whitespace_error = 0
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 0
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_function_parameters = 1
    let g:go_highlight_types = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_string_spellcheck = 0
    let g:go_highlight_variable_declarations = 0
    let g:go_highlight_variable_assignments = 0

# Python related
- { repo: vim-python/python-syntax, on_ft: python }
- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }  # ?
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }

# Misc
- { repo: StanAngeloff/php.vim, on_ft: php }
- { repo: tbastos/vim-lua, on_ft: lua }
- { repo: vim-ruby/vim-ruby, on_ft: ruby }
- { repo: keith/swift.vim, on_ft: swift }
- { repo: rust-lang/rust.vim, on_ft: rust }
- { repo: vim-jp/syntax-vim-ex, on_ft: vim }
- { repo: chrisbra/csv.vim, on_ft: csv }
- { repo: tpope/vim-git, on_ft: [ gitcommit, gitrebase, gitconfig ]}
- { repo: ekalinin/Dockerfile.vim, on_ft: [ Dockerfile, docker-compose ]}
- { repo: tmux-plugins/vim-tmux, on_ft: tmux }
- { repo: MTDL9/vim-log-highlighting, on_ft: log }
- { repo: cespare/vim-toml, on_ft: toml }
- { repo: mboughaba/i3config.vim, on_ft: i3config }
- { repo: dag/vim-fish, on_ft: fish }
- { repo: jstrater/mpvim, on_ft: portfile }
- { repo: robbles/logstash.vim, on_ft: logstash }
- { repo: lifepillar/pgsql.vim, on_ft: pgsql }
- { repo: chr4/nginx.vim, on_ft: nginx }
- { repo: towolf/vim-helm, on_ft: helm }

- repo: pearofducks/ansible-vim
  on_ft: [ ansible, ansible_hosts, jinja2 ]
  hook_add: |-
    let g:ansible_extra_keywords_highlight = 1
    let g:ansible_template_syntaxes = {
      \   '*.json.j2': 'json',
      \   '*.(ba)?sh.j2': 'sh',
      \   '*.ya?ml.j2': 'yaml',
      \   '*.xml.j2': 'xml',
      \   '*.conf.j2': 'conf',
      \   '*.ini.j2': 'ini'
      \ }

- repo: hashivim/vim-terraform
  on_ft: terraform
  on_cmd: [ Terraform, TerraformFmt ]

# ==========================================
# Commands
# --------
- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source $VIM_PATH/config/plugins/defx.vim

- { repo: kristijanhusak/defx-git, on_source: defx.nvim }
- { repo: kristijanhusak/defx-icons, on_source: defx.nvim }

- { repo: tyru/caw.vim, on_map: { nx: <Plug> }}
- { repo: liuchengxu/vim-which-key, on_cmd: WhichKey }
- { repo: mbbill/undotree, on_cmd: UndotreeToggle }
- { repo: reedes/vim-wordy, on_cmd: [ Wordy, NoWordy, NextWordy ]}
- { repo: jreybert/vimagit, on_cmd: Magit }
- { repo: tweekmonster/helpful.vim, on_cmd: HelpfulVersion }
- { repo: kana/vim-altr, on_map: { n: <Plug> }}
- { repo: Shougo/vinarise.vim, on_cmd: Vinarise }
- { repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable }
- { repo: cocopon/colorswatch.vim, on_cmd: ColorSwatchGenerate }
- { repo: dstein64/vim-startuptime, on_cmd: StartupTime }

- repo: lambdalisue/gina.vim
  on_cmd: Gina
  hook_source: source $VIM_PATH/config/plugins/gina.vim

- repo: brooth/far.vim
  on_cmd: [ Far, Farp, F ]
  hook_source: |-
    if executable('rg')
      let g:far#source = 'rg'
    elseif executable('ag')
      let g:far#source = 'ag'
    elseif executable('ack')
      let g:far#source = 'ack'
    endif

- repo: Vigemus/iron.nvim
  if: has('nvim')
  on_cmd: [ IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile ]
  on_map: { nv: <Plug> }
  on_func: IronUnwatchFile
  hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
  hook_source: luafile $VIM_PATH/config/plugins/iron.lua

- repo: kana/vim-niceblock
  on_map: { x: <Plug> }
  hook_add: let g:niceblock_no_default_key_mappings = 0

- repo: t9md/vim-choosewin
  on_map: { n: <Plug> }
  hook_add: |-
    let g:choosewin_label = 'ADFGHJKLUIOPQWERT'
    let g:choosewin_label_align = 'right'
    let g:choosewin_label_padding = 5

- repo: lambdalisue/suda.vim
  on_event: BufRead
  hook_add: let g:suda_smart_edit = 1

- repo: mzlogin/vim-markdown-toc
  on_cmd: [ GenTocGFM, GenTocRedcarpet, GenTocGitLab, UpdateToc ]
  hook_add: let g:vmt_auto_update_on_save = 0

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_add: |-
    let g:vista#renderer#enable_icon = 1
    let g:vista_echo_cursor_strategy = 'scroll'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ }

- repo: junegunn/fzf
  merged: 0
  on_cmd: FZF
  type__depth: 1
  hook_source: |-
    let g:fzf_layout = { 'down': '~25%' }

- repo: junegunn/fzf.vim
  depends: fzf
  merged: 0
  on_cmd: [ Files, GitFiles, Buffers, Lines, Locate, Colors, Ag, Rg, Tags ]
  on_func: [ fzf#vim#with_preview, fzf#run, vista#finder#fzf#Run ]

- repo: Ron89/thesaurus_query.vim
  on_cmd:
    - Thesaurus
    - ThesaurusQueryReplaceCurrentWord
    - ThesaurusQueryLookupCurrentWord
  hook_add: |-
    let g:tq_map_keys = 0
    let g:tq_use_vim_autocomplete = 0

# ==========================================
# Interface
# ---------
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}
- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> }, if: $SUDO_USER == '' }
- { repo: haya14busa/vim-edgemotion, on_map: { nv: <Plug> }}
- { repo: t9md/vim-quickhl, on_map: { nv: <Plug> }}
- { repo: hotwatermorning/auto-git-diff, on_ft: gitrebase }
- { repo: rafi/vim-sidemenu, on_map: { nv: <Plug> }}

- repo: machakann/vim-highlightedyank
  on_event: TextYankPost
  hook_source: let g:highlightedyank_highlight_duration = 200

- repo: romainl/vim-qf
  on_ft: qf
  on_event: QuickFixCmdPost
  on_map: { n: <Plug> }
  hook_add: |-
    let g:qf_bufname_or_text = 1
    let g:qf_auto_open_quickfix = 0
    let g:qf_auto_open_loclist = 0
    let g:qf_auto_resize = 0
    autocmd User preview_open_pre
      \ let g:vim_markdown_folding_disabled = 1
      \| let g:vim_markdown_override_foldtext = 0
      \| let g:vim_markdown_no_default_key_mappings = 1
      \| let g:vim_markdown_emphasis_multiline = 0
    autocmd User preview_open_post
      \ unlet g:vim_markdown_folding_disabled
      \| let g:vim_markdown_override_foldtext = 1
      \| unlet g:vim_markdown_no_default_key_mappings
      \| unlet g:vim_markdown_emphasis_multiline

- repo: wellle/context.vim
  on_cmd: [ ContextToggle, ContextToggleWindow, ContextPeek ]

# hook_add: let g:context_add_autocmds = 0
# let g:context_add_mappings = 0
# hook_source: source $VIM_PATH/config/plugins/context.vim

# - repo: dominikduda/vim_current_word
#   on_event: [ FileType, WinEnter, InsertLeave ]

- repo: itchyny/vim-cursorword
  on_event: FileType
  hook_source: |-
    augroup user_plugin_cursorword
      autocmd!
      autocmd FileType defx,denite,fern,qf let b:cursorword = 0
      autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
      autocmd InsertEnter * let b:cursorword = 0
      autocmd InsertLeave * let b:cursorword = 1
    augroup END

- repo: airblade/vim-gitgutter
  on_event: FileType
  hook_add: |-
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sign_added = '▎'
    let g:gitgutter_sign_modified = '▎'
    let g:gitgutter_sign_removed = '▍'
    let g:gitgutter_sign_removed_first_line = '▘'
    let g:gitgutter_sign_removed_above_and_below = '_¯'
    let g:gitgutter_sign_modified_removed = '▍'
    let g:gitgutter_preview_win_floating = 1
    let g:gitgutter_sign_allow_clobber = 0
    let g:gitgutter_sign_priority = 0
    let g:gitgutter_override_sign_column_highlight = 0

- repo: kshenoy/vim-signature
  depends: vim-gitgutter
  on_event: FileType
  hook_add: |-
    let g:SignatureForceRemoveGlobal = 0
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarkers = repeat('⚐', 10)
    autocmd user_events User GitGutter call signature#sign#Refresh()

- repo: nathanaelkane/vim-indent-guides
  on_event: FileType
  hook_post_source: IndentGuidesEnable
  hook_add: |-
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_tab_guides = 0
    let g:indent_guides_color_change_percent = 3
    let g:indent_guides_guide_size = 1
    let g:indent_guides_exclude_filetypes = [
      \ 'help', 'denite', 'denite-filter', 'startify',
      \ 'vista', 'vista_kind', 'tagbar', 'nerdtree',
      \ 'lsp-hover', 'clap_input', 'any-jump',
      \ 'gina-status', 'gina-commit', 'gina-log'
      \ ]

- repo: rhysd/committia.vim
  on_event: BufReadPost
  hook_source: let g:committia_min_window_width = 70

- repo: junegunn/goyo.vim
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $VIM_PATH/config/plugins/goyo.vim

- repo: junegunn/limelight.vim
  on_cmd: Limelight

- repo: itchyny/calendar.vim
  on_cmd: Calendar
  hook_source: |-
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1

- repo: deris/vim-shot-f
  on_map: { nxo: <Plug> }
  hook_add: let g:shot_f_no_default_key_mappings = 1

- repo: vimwiki/vimwiki
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |-
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |-
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/docs/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'path': '~/docs/books/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]

- repo: norcalli/nvim-colorizer.lua
  if: has('nvim-0.4')
  on_event: FileType
  hook_source: luafile $VIM_PATH/config/plugins/colorizer.lua

# ==========================================
# Completion and code analysis
# ----------

- repo: prabirshrestha/async.vim  # only autoload functions, lazy by nature

- repo: prabirshrestha/asyncomplete.vim
  depends: async.vim
  hook_add: let g:asyncomplete_auto_completeopt = 0
  hook_source: source $VIM_PATH/config/plugins/asyncomplete.vim

- repo: prabirshrestha/asyncomplete-lsp.vim
  depends: asyncomplete.vim

- repo: prabirshrestha/vim-lsp
  depends: asyncomplete-lsp.vim
  hook_add: |-
    let g:lsp_async_completion = 1
    let g:lsp_ignorecase = 1
    let g:lsp_virtual_text_enabled = 0
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_diagnostics_echo_delay = 400
    let g:lsp_highlight_references_enabled = 0
  hook_source: source $VIM_PATH/config/plugins/lsp-settings.vim

- repo: mattn/vim-lsp-settings
  depends: vim-lsp
  merged: 0
  hook_add: |-
    let g:lsp_settings = {
    \   'efm-langserver': {'disabled': 1},
    \   'yaml-language-server': {
    \     'allowlist': ['yaml', 'yaml.ansible'],
    \   }
    \ }

- repo: Shougo/neco-vim
  on_ft: vim
  merged: 0

- repo: prabirshrestha/asyncomplete-necovim.vim
  depends: asyncomplete.vim
  hook_source: |-
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#necovim#get_source_options({
      \ 'name': 'necovim',
      \ 'allowlist': ['vim'],
      \ 'completor': function('asyncomplete#sources#necovim#completor'),
      \ }))

- repo: prabirshrestha/asyncomplete-buffer.vim
  depends: asyncomplete.vim
  hook_source: |-
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'allowlist': ['*'],
      \ 'blocklist': ['go', 'denite-filter', 'clap_input'],
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ 'config': {
      \    'max_buffer_size': 4000000,
      \  },
      \ }))

- repo: prabirshrestha/asyncomplete-tags.vim
  if: executable('ctags')
  depends: asyncomplete.vim
  hook_source: |-
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#tags#get_source_options({
      \ 'name': 'tags',
      \ 'allowlist': ['*'],
      \ 'blocklist': ['go', 'python', 'vim', 'denite-filter', 'clap_input'],
      \ 'completor': function('asyncomplete#sources#tags#completor'),
      \ 'config': { 'max_file_size': 5000000 },
      \ }))

- repo: prabirshrestha/asyncomplete-file.vim
  depends: asyncomplete.vim
  hook_source: |-
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'priority': 10,
      \ 'allowlist': ['*'],
      \ 'blocklist': ['denite-filter', 'clap_input'],
      \ 'completor': function('asyncomplete#sources#file#completor')
      \ }))

- repo: wellle/tmux-complete.vim
  if: "! (has('win32') || has('win64'))"
  depends: asyncomplete.vim
  hook_add: |-
    let g:tmuxcomplete#trigger = ''
    let g:tmuxcomplete#asyncomplete_source_options = {
      \ 'name': 'tmux',
      \ 'priority': 0,
      \ 'allowlist': ['*'],
      \ 'blocklist': ['denite-filter', 'clap_input'],
      \ 'config': {
      \   'splitmode': 'words',
      \   'filter_prefix': 1,
      \   'show_incomplete': 1,
      \   'sort_candidates': 0,
      \   'scrollback': 0,
      \   'truncate': 0
      \   }
      \ }

- repo: prabirshrestha/asyncomplete-ultisnips.vim
  depends: asyncomplete.vim
  if: has('python3')
  hook_source: |-
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#ultisnips#get_source_options({
      \ 'name': 'snip',
      \ 'priority': 0,
      \ 'allowlist': ['*'],
      \ 'blocklist': ['denite-filter', 'clap_input'],
      \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
      \ }))

- repo: SirVer/ultisnips
  if: has('python3')
  on_event: FileType
  hook_add: |-
    let g:UltiSnipsExpandTrigger = '<C-l>'
    let g:UltiSnipsListSnippets = '<C-Tab>'
    let g:UltiSnipsJumpForwardTrigger = '<Tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

- repo: honza/vim-snippets
  depends: ultisnips
  on_event: FileType
  if: has('python3')
  merged: 0

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html, css, javascript, javascriptreact, svelte ]
  hook_source: |-
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: ncm2/float-preview.nvim
  if: has('nvim-0.4')
  on_event: InsertEnter
  hook_source: |-
    let g:float_preview#docked = 0
    let g:float_preview#max_width = 80
    function! s:float_preview()
      call nvim_win_set_option(g:float_preview#win, 'signcolumn', 'no')
    endfunction
    autocmd user_events User FloatPreviewWinOpen call <SID>float_preview()

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [ BufReadPost, BufWritePost ]
  hook_add: |-
    let g:gutentags_cache_dir = $DATA_PATH . '/tags'
    let g:gutentags_generate_on_write = 0
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0
    let g:gutentags_exclude_project_root = [ '/usr/local' ]
    let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]
    let g:gutentags_ctags_exclude = [
      \ '.idea', '.cache', '.tox', '.bundle', 'build', 'dist',
      \ '*/wp-admin', '*/wp-content', '*/wp-includes',
      \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
      \ ]

- repo: Raimondi/delimitMate
  on_event: FileType
  hook_source: |-
    let g:delimitMate_expand_cr = 0
    let g:delimitMate_expand_space = 1
    let g:delimitMate_smart_quotes = 1
    let g:delimitMate_expand_inside_quotes = 0
    let g:delimitMate_excluded_ft = 'mail,txt'
    augroup user_plugin_delimitMate
      au!
      au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
      au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
      au FileType tex let b:delimitMate_quotes = ""
      au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
    augroup END

# ==========================================
# Denite
# ------
- repo: Shougo/denite.nvim
  on_cmd: Denite
  trusted: 1
  hook_source: source $VIM_PATH/config/plugins/denite.vim

- repo: Shougo/neomru.vim
  on_source: denite.nvim
  hook_add: |-
    let g:neomru#directory_mru_path = $DATA_PATH . '/mru/dir'
    let g:neomru#file_mru_path = $DATA_PATH . '/mru/file'
    let g:unite_source_file_mru_limit = 5000

- { repo: Shougo/neoyank.vim, on_source: denite.nvim, on_event: TextYankPost }
- { repo: Shougo/junkfile.vim, on_source: denite.nvim }
- { repo: chemzqm/unite-location, on_source: denite.nvim }
- { repo: rafi/vim-denite-session, on_source: denite.nvim }

- repo: rafi/vim-denite-z
  on_source: denite.nvim
  hook_source: |-
    command! -nargs=+ -complete=file Z call denite#start(
      \ [{'name': 'z', 'args': [<q-args>], {'immediately': 1}}])

# ==========================================
# Operators
# ---------
- repo: kana/vim-operator-user  # only autoload functions, lazy by nature

- { repo: kana/vim-operator-replace, on_map: { vnx: <Plug> }}

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |-
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

# ==========================================
# Text objects
# ------------
- repo: kana/vim-textobj-user  # only autoload functions, lazy by nature
- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}
- { repo: AndrewRadev/sideways.vim, on_map: { onx: <Plug>Sideways }}
- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin }}
- { repo: AndrewRadev/linediff.vim, on_cmd: Linediff }

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

- repo: kana/vim-textobj-function
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1

#  vim: set ts=2 sw=2 tw=80 et :
